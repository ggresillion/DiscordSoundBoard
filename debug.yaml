---
# Source: discordsoundboard/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: secret
type: Opaque
data:
  clientId: "NDk3NDc0NjM2MTMzNTY0NDE3"
  clientSecret: "T2ItZnl6cnZ1bEVKZWJwLU1fbThfbGszWjVmbUFZMFM="
  botToken: "TkRrM05EYzBOak0yTVRNek5UWTBOREUzLlhwM0hRQS5ZcDcxbmZ4SHBSalVXa1ZkSTJfRExSOWhrbDQ="
  postgresqlPassword: "UW1ITXhnQmQ4M3k2bWVHWg=="
---
# Source: discordsoundboard/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: RELEASE-NAME-discordsoundboard
  annotations:
    dev.okteto.com/generate-host: "true"
spec:
  rules:
    - http:
        paths:
          - path: /api
            backend:
              serviceName: api
              servicePort: http
          - path: /
            backend:
              serviceName: client
              servicePort: http
---
# Source: discordsoundboard/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.8.11
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME

---
# Source: discordsoundboard/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.8.11
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: RELEASE-NAME-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: RELEASE-NAME
      role: master
  template:
    metadata:
      name: RELEASE-NAME-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-9.8.11
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: RELEASE-NAME-postgresql
          image: docker.io/bitnami/postgresql:11.9.0-debian-10-r73
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "dsb"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "dsb"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "dsb" -d "dbname=dsb" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "dsb" -d "dbname=dsb" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "150Mi"
        

---
# Source: discordsoundboard/templates/service-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    tier: api

---
# Source: discordsoundboard/templates/deployment-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    tier: api
spec:
  replicas: 
  selector:
    matchLabels:
      tier: api
  template:
    metadata:
      labels:
        tier: api
    spec:
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: storage-claim
      containers:
        - name: discordsoundboard
          securityContext:
          image: "okteto.dev/discordsoundboard_api:latest"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          volumeMounts:
            - name: storage
              mountPath: /app/uploads
          env:
            - name: NODE_ENV
              value: production
            - name: DB_HOST
              value: discordsoundboard-postgresql
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: postgresqlPassword
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: clientId
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: clientSecret
            - name: BOT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: secret
                  key: botToken
          livenessProbe:
            httpGet:
              path: /api
              port: 8000
          readinessProbe:
            httpGet:
              path: /api
              port: 8000

---

  apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: storage-claim
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 4Gi
---
# Source: discordsoundboard/charts/postgresql/templates/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.8.11
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-postgres-password: "WUNGa0xNWDZ0Rg=="
  postgresql-password: "UW1ITXhnQmQ4M3k2bWVHWg=="
---
# Source: discordsoundboard/templates/service-client.yaml
apiVersion: v1
kind: Service
metadata:
  name: client
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    tier: client

---
# Source: discordsoundboard/templates/deployment-client.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  labels:
    tier: client
spec:
  replicas: 
  selector:
    matchLabels:
      tier: client
  template:
    metadata:
      labels:
        tier: client
    spec:
      containers:
        - name: discordsoundboard
          securityContext:
          image: "okteto.dev/discordsoundboard_client:latest"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http

---
# Source: discordsoundboard/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-9.8.11
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME
    role: master

---
# Source: discordsoundboard/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "RELEASE-NAME-discordsoundboard-test-connection"
  labels:
    helm.sh/chart: discordsoundboard-0.1.0
    app.kubernetes.io/name: discordsoundboard
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['RELEASE-NAME-discordsoundboard:80 }}']
  restartPolicy: Never
